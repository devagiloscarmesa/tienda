{"version":3,"sources":["components/class-component/Vendedor.js","components/class-component/Producto.js","App.js","serviceWorker.js","index.js"],"names":["Vendedor","handleCambiar","setState","nombre","apellido","render","className","state","onClick","React","Component","Producto","App","id","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA6CeA,E,kDA3CX,aAAc,IAAD,8BACT,gBAMJC,cAAgB,WACZ,EAAKC,SAAS,CACVC,OAAS,QACTC,SAAW,UAVN,EAcbC,OAAS,WACL,OACI,6BAASC,UAAY,gBACjB,yBAAKA,UAAU,eAAf,YAGA,yBAAKA,UAAU,aACf,yBAAKA,UAAY,OACT,yBAAKA,UAAY,kBAAjB,WAA2C,EAAKC,MAAMJ,QACtD,yBAAKG,UAAY,kBAAjB,aAA6C,EAAKC,MAAMH,WAE5D,yBAAKE,UAAY,OACb,yBAAKA,UAAY,kBAAjB,UACA,yBAAKA,UAAY,kBAAjB,gBAEJ,yBAAKA,UAAY,OACb,yBAAKA,UAAY,kBAAjB,2BAGR,yBAAKA,UAAY,OACb,yBAAKA,UAAY,kBACb,4BAAQE,QAAW,EAAKP,eAAxB,eAjChB,EAAKM,MAAQ,CACTJ,OAAS,iBAHJ,E,UADMM,IAAMC,W,QCsBdC,E,uKAlBP,OAAQ,6BAASL,UAAY,mBACzB,yBAAKA,UAAU,eAAf,YAGA,yBAAKA,UAAU,aACX,yBAAKA,UAAY,OACb,yBAAKA,UAAY,kBAAjB,gBACA,yBAAKA,UAAY,kBAAjB,gBAEJ,yBAAKA,UAAY,OACb,yBAAKA,UAAY,kBAAjB,YACA,yBAAKA,UAAY,kBAAjB,sB,GAdGI,aCqCRE,MAjCf,WACE,OACE,yBAAKN,UAAU,sBAAsBO,GAAK,oBAGxC,kBAAC,IAAD,KACA,yBAAKP,UAAU,iDACb,4BAAQA,UAAU,iBAAiBQ,KAAK,SAASC,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC9K,0BAAMb,UAAU,yBAGd,yBAAKA,UAAU,2BAA2BO,GAAG,uBAC3C,wBAAIP,UAAU,mCACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMc,GAAK,YAAYd,UAAU,YAAjC,aAEF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMc,GAAK,YAAYd,UAAU,YAAjC,gBAMV,6BACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,CAAUpB,OAAS,kBAC1D,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,CAAUpB,OAAS,cAClE,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,YAAYC,UAAWZ,QCpB/Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxB,OACP,kBAAC,IAAMyB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33ecdb71.chunk.js","sourcesContent":["import React from 'react';\r\nclass Vendedor extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            nombre : 'Carlos Menses'\r\n        };\r\n    }\r\n    \r\n    handleCambiar = () => {\r\n        this.setState({\r\n            nombre : \"Diego\", \r\n            apellido : \"Diaz\"\r\n        });\r\n    }\r\n    \r\n    render = () => {\r\n        return (\r\n            <section className = \"card bg-info\">\r\n                <div className=\"card-header\">\r\n                    Vendedor\r\n                </div>\r\n                <div className=\"card-body\">\r\n                <div className = \"row\">\r\n                        <div className = \"col-lg-6 col-6\">Nombre: {this.state.nombre}</div>\r\n                        <div className = \"col-lg-6 col-6\">Apellido: {this.state.apellido}</div>\r\n                    </div>\r\n                    <div className = \"row\">\r\n                        <div className = \"col-lg-6 col-6\">Edad: </div>\r\n                        <div className = \"col-lg-6 col-6\">Documento: </div>\r\n                    </div>\r\n                    <div className = \"row\">\r\n                        <div className = \"col-lg-6 col-6\">Lugar de residencia: </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <div className = \"col-lg-6 col-6\">\r\n                        <button onClick = {this.handleCambiar}>Cambiar</button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Vendedor;","import React, {Component} from 'react';\r\n\r\nclass Producto extends Component{\r\n    \r\n    render(){\r\n        return (<section className = \"card bg-success\">\r\n            <div className=\"card-header\">\r\n                Producto\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className = \"row\">\r\n                    <div className = \"col-lg-6 col-6\">Referencia: </div>\r\n                    <div className = \"col-lg-6 col-6\">CÃ³digo: </div>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <div className = \"col-lg-6 col-6\">Precio: </div>\r\n                    <div className = \"col-lg-6 col-6\">Importado: </div>\r\n                </div>\r\n            </div>\r\n        </section>);\r\n    }\r\n}\r\n\r\nexport default Producto;","import React from 'react';\nimport {Link, BrowserRouter as Router, Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Vendedor from './components/class-component/Vendedor'\nimport Producto from './components/class-component/Producto'\nfunction App() {\n  return (\n    <div className=\"App container-fluid\" id = \"contenedor_padre\">\n    \n    \n      <Router>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                <li className=\"nav-item active\">\n                  <Link to = \"/vendedor\" className=\"nav-link\">Vendedor</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to = \"/producto\" className=\"nav-link\">Producto</Link>\n                </li>\n              </ul>\n            \n            </div>\n          </nav>\n        <div>\n          <Route exact path=\"/\" component={() => <Vendedor nombre = \"oscar mesa\" /> }/>\n          <Route exact path=\"/vendedor\" component={() => <Vendedor nombre = \"carlos\" /> } />\n          <Route exact path=\"/producto\" component={Producto} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}